"""
Module d'entra√Ænement du mod√®le pour le projet Titanic.

Ce script charge les donn√©es pr√©trait√©es, entra√Æne un mod√®le de classification 
(RandomForestClassifier), √©value sa pr√©cision et sauvegarde le mod√®le entra√Æn√©.
"""

import pandas as pd
import joblib  # Pour sauvegarder le mod√®le
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

def load_data(file_path):
    """
    Charge les donn√©es nettoy√©es √† partir d'un fichier CSV.

    Args:
        file_path (str): Chemin vers le fichier contenant les donn√©es pr√©trait√©es.

    Returns:
        pd.DataFrame: DataFrame contenant les donn√©es nettoy√©es.
    """
    return pd.read_csv(file_path)

def split_data(df):
    """
    S√©pare les donn√©es en features (X) et variable cible (y), puis divise en train/test.

    Args:
        df (pd.DataFrame): Donn√©es pr√©trait√©es contenant la colonne 'Survived'.

    Returns:
        tuple: X_train, X_test, y_train, y_test (ensembles d'entra√Ænement et de test).
    """
    X = df.drop(columns=['Survived'])  # Supprime la colonne cible
    y = df['Survived']  # Cible (0 = Non, 1 = Oui)
    return train_test_split(X, y, test_size=0.2, random_state=42)  # 80% train, 20% test

def train_model(X_train, y_train):
    """
    Entra√Æne un mod√®le RandomForestClassifier sur les donn√©es d'entra√Ænement.

    Args:
        X_train (pd.DataFrame): Features d'entra√Ænement.
        y_train (pd.Series): Labels d'entra√Ænement.

    Returns:
        RandomForestClassifier: Mod√®le entra√Æn√©.
    """
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    return model

def save_model(model, model_path):
    """
    Sauvegarde le mod√®le entra√Æn√© dans un fichier .pkl.

    Args:
        model (RandomForestClassifier): Mod√®le entra√Æn√©.
        model_path (str): Chemin du fichier o√π sauvegarder le mod√®le.
    """
    joblib.dump(model, model_path)
    print(f"‚úÖ Mod√®le sauvegard√© : {model_path}")

if __name__ == "__main__":
    print("üîπ Chargement des donn√©es...")
    df = load_data("data/processed_train.csv")

    print("üîπ S√©paration des donn√©es en features et labels...")
    X_train, X_test, y_train, y_test = split_data(df)

    print("üîπ Entra√Ænement du mod√®le...")
    model = train_model(X_train, y_train)

    print("üîπ √âvaluation du mod√®le...")
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    print(f"üéØ Pr√©cision du mod√®le : {accuracy:.2f}")

    print("üîπ Sauvegarde du mod√®le entra√Æn√©...")
    save_model(model, "models/random_forest.pkl")
