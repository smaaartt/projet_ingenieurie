# Importation des bibliothÃ©ques
import pandas as pd
from sklearn.model_selection import train_test_split


# Importation des donnÃ©es
def load_data(train_path, test_path):
    """Charge les fichiers train et test."""
    train = pd.read_csv(train_path)
    test = pd.read_csv(test_path)
    return train, test
"""
Fonction prennant en entrÃ©e deux chemins de fichiers (csv).
Utilisation pd.read_csv() pour lire les fichiers CSV et les stocker sous forme de DataFrame.
Retourne deux DataFrames : train et test.
"""


def preprocess_data(df):
    """Nettoie et prÃ©pare les donnÃ©es pour l'entraÃ®nement du modÃ¨le."""
    df = df.copy()
    
    # Remplissage des valeurs manquantes
    df['Age'] = df['Age'].fillna(df['Age'].median())
    df.loc[:, 'Embarked'] = df['Embarked'].fillna(df['Embarked'].mode()[0])
    df.loc[:, 'Fare'] = df['Fare'].fillna(df['Fare'].median())
    
    # Suppression des colonnes inutiles
    df.drop(columns=['Cabin', 'Ticket', 'Name', 'PassengerId'], inplace=True)
    
    # Encodage des variables catÃ©goriques
    df = pd.get_dummies(df, columns=['Sex', 'Embarked'], drop_first=True)
    
    return df
"""
Copie du dataframe pour Ã©viter de modifier les donnÃ©es originales directement.

variable Age : Remplace les valeurs manquantes par la mÃ©diane.
variable Embarked : Remplace les valeurs manquantes par la valeur la plus frÃ©quente.
variable Fare â†’ Remplace les valeurs manquantes par la mÃ©diane.

Suppression des variables Cabin, Ticket, Name, PassengerId.

Transformation des variables catÃ©goriques (Sex, Embarked) en variables numÃ©riques (0 ou 1).
Permet d'Ã©viter la multicolinÃ©aritÃ© (Ã©viter dâ€™avoir des informations redondantes).
"""


def split_data(df):
    """SÃ©pare les donnÃ©es en ensembles d'entraÃ®nement et de validation."""
    X = df.drop(columns=['Survived'])
    y = df['Survived']
    return train_test_split(X, y, test_size=0.2, random_state=42)
"""
Variable x contient toutes les colonnes sauf Survived.
Variable y contient uniquement la colonne Survived (prÃ©diction).
Division en train/test
	0.2 â†’ 20% des donnÃ©es seront mises de cÃ´tÃ© pour les tests.
	42 â†’ Assure que la rÃ©partition est toujours la mÃªme pour avoir des rÃ©sultats reproductibles.
"""


if __name__ == "__main__":
    train, test = load_data("C:/projet-titanic/data/train.csv", "C:/projet-titanic/data/test.csv")
    print("ğŸ”¹ DonnÃ©es chargÃ©es avec succÃ¨s !")
    
    train = preprocess_data(train)
    print("ğŸ”¹ PrÃ©traitement terminÃ© !")

    output_path = "C:/projet-titanic/data/processed_train.csv"
    train.to_csv(output_path, index=False)

    print(f"âœ… Fichier sauvegardÃ© : {output_path}")
"""
Si les donnÃ©es train et test sont chargÃ©es â†’ retourne un message indiquant que le chargement est effectuÃ©.
Application de la fonction 'preprocess_data' sur les donnÃ©es train â†’ retourne un message indiquant que le traitement est effectuÃ©.
Sauvegarde des donnÃ©es issues du prÃ©traitement dans un fichier csv â†’ retourne un message indiquant que l'enregistrement est effectuÃ©.
"""