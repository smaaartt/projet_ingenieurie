"""
Module d'√©valuation du mod√®le pour le projet Titanic.

Ce script charge le mod√®le entra√Æn√© et les donn√©es de test, effectue des pr√©dictions 
et affiche des m√©triques d'√©valuation (accuracy, classification report).
"""

import pandas as pd
import joblib
from sklearn.metrics import accuracy_score, classification_report

def load_test_data(test_path):
    """
    Charge les donn√©es de test pr√©trait√©es.

    Args:
        test_path (str): Chemin du fichier CSV des donn√©es test.

    Returns:
        pd.DataFrame: Donn√©es de test sous forme de DataFrame.
    """
    return pd.read_csv(test_path)

def load_model(model_path):
    """
    Charge le mod√®le entra√Æn√© depuis un fichier.

    Args:
        model_path (str): Chemin du fichier mod√®le (.pkl).

    Returns:
        RandomForestClassifier: Mod√®le charg√©.
    """
    return joblib.load(model_path)

def evaluate_model(model, X_test, y_test):
    """
    √âvalue le mod√®le sur des donn√©es de test en affichant :
    - La pr√©cision globale (accuracy)
    - Le rapport de classification d√©taill√© (precision, recall, f1-score)

    Args:
        model (RandomForestClassifier): Mod√®le entra√Æn√©.
        X_test (pd.DataFrame): Features de test.
        y_test (pd.Series): Labels de test.

    Prints:
        - Accuracy du mod√®le.
        - Rapport de classification.
    """
    y_pred = model.predict(X_test)
    
    accuracy = accuracy_score(y_test, y_pred)
    report = classification_report(y_test, y_pred)

    print(f"üéØ Pr√©cision du mod√®le : {accuracy:.2f}")
    print("\nüìä Rapport de classification :\n", report)

if __name__ == "__main__":
    print("üîπ Chargement des donn√©es de test...")
    df_test = load_test_data("data/processed_train.csv")  # ‚ö†Ô∏è √Ä adapter si test.csv

    print("üîπ S√©paration des features et de la cible...")
    X_test = df_test.drop(columns=['Survived'])
    y_test = df_test['Survived']

    print("üîπ Chargement du mod√®le...")
    model = load_model("models/random_forest.pkl")

    print("üîπ √âvaluation du mod√®le...")
    evaluate_model(model, X_test, y_test)
